// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkManagementPortal.Backend.Infrastructure.Context;

#nullable disable

namespace WorkManagementPortal.Backend.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250210182445_AddFlagsForWorkLogs")]
    partial class AddFlagsForWorkLogs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WorkManagementPortal.Backend.Infrastructure.Models.ApplicationActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DurationInSeconds")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationActivityLogs");
                });

            modelBuilder.Entity("WorkManagementPortal.Backend.Infrastructure.Models.LeaveEmployeeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeaveType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LeaveEmployeeRequests");
                });

            modelBuilder.Entity("WorkManagementPortal.Backend.Infrastructure.Models.PauseTrackingLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("PauseDurationInMinutes")
                        .HasColumnType("float");

                    b.Property<DateTime>("PauseEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PauseIsFinished")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PauseStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("PauseType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("WorkDate")
                        .HasColumnType("date");

                    b.Property<int>("WorkTrackingLogId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkTrackingLogId");

                    b.ToTable("PauseTrackingLogs");
                });

            modelBuilder.Entity("WorkManagementPortal.Backend.Infrastructure.Models.ScreenShotTrackingLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ScreenShotTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Screenshot")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("WorkTrackingLogId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkTrackingLogId");

                    b.ToTable("ScreenShotTrackingLogs");
                });

            modelBuilder.Entity("WorkManagementPortal.Backend.Infrastructure.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeSerialNumber")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupervisorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamLeaderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("WorkShiftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("TeamLeaderId");

                    b.HasIndex("WorkShiftId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WorkManagementPortal.Backend.Infrastructure.Models.WorkShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsComplex")
                        .HasColumnType("bit");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShiftType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WorkShifts");
                });

            modelBuilder.Entity("WorkManagementPortal.Backend.Infrastructure.Models.WorkShiftDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("WorkShiftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkShiftId");

                    b.ToTable("WorkShiftDetails");
                });

            modelBuilder.Entity("WorkManagementPortal.Backend.Infrastructure.Models.WorkTrackingLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("ActualWorkDurationInHours")
                        .HasColumnType("float");

                    b.Property<bool>("ExceededPauseHours")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCheckedInLate")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCheckedOutAEarly")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaused")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("bit");

                    b.Property<double>("OvertimeWorkDurationInHours")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("WorkDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("WorkTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WorkTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WorkedOutofSchedule")
                        .HasColumnType("bit");

                    b.Property<bool>("WorkedOvertime")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkTrackingLogs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WorkManagementPortal.Backend.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WorkManagementPortal.Backend.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkManagementPortal.Backend.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WorkManagementPortal.Backend.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkManagementPortal.Backend.Infrastructure.Models.ApplicationActivityLog", b =>
                {
                    b.HasOne("WorkManagementPortal.Backend.Infrastructure.Models.User", "User")
                        .WithMany("ApplicationActivityLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkManagementPortal.Backend.Infrastructure.Models.LeaveEmployeeRequest", b =>
                {
                    b.HasOne("WorkManagementPortal.Backend.Infrastructure.Models.User", "User")
                        .WithMany("LeaveEmployeeRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkManagementPortal.Backend.Infrastructure.Models.PauseTrackingLog", b =>
                {
                    b.HasOne("WorkManagementPortal.Backend.Infrastructure.Models.WorkTrackingLog", "WorkTrackingLog")
                        .WithMany("PauseTrackingLogs")
                        .HasForeignKey("WorkTrackingLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkTrackingLog");
                });

            modelBuilder.Entity("WorkManagementPortal.Backend.Infrastructure.Models.ScreenShotTrackingLog", b =>
                {
                    b.HasOne("WorkManagementPortal.Backend.Infrastructure.Models.User", "User")
                        .WithMany("ScreenShotTrackingLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkManagementPortal.Backend.Infrastructure.Models.WorkTrackingLog", "WorkTrackingLog")
                        .WithMany("ScreenShotTrackingLogs")
                        .HasForeignKey("WorkTrackingLogId");

                    b.Navigation("User");

                    b.Navigation("WorkTrackingLog");
                });

            modelBuilder.Entity("WorkManagementPortal.Backend.Infrastructure.Models.User", b =>
                {
                    b.HasOne("WorkManagementPortal.Backend.Infrastructure.Models.User", "Supervisor")
                        .WithMany("Workers")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorkManagementPortal.Backend.Infrastructure.Models.User", "TeamLeader")
                        .WithMany("Supervisors")
                        .HasForeignKey("TeamLeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorkManagementPortal.Backend.Infrastructure.Models.WorkShift", "WorkShift")
                        .WithMany("Users")
                        .HasForeignKey("WorkShiftId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Supervisor");

                    b.Navigation("TeamLeader");

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("WorkManagementPortal.Backend.Infrastructure.Models.WorkShiftDetail", b =>
                {
                    b.HasOne("WorkManagementPortal.Backend.Infrastructure.Models.WorkShift", "WorkShift")
                        .WithMany("WorkShiftDetails")
                        .HasForeignKey("WorkShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("WorkManagementPortal.Backend.Infrastructure.Models.WorkTrackingLog", b =>
                {
                    b.HasOne("WorkManagementPortal.Backend.Infrastructure.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkManagementPortal.Backend.Infrastructure.Models.User", b =>
                {
                    b.Navigation("ApplicationActivityLogs");

                    b.Navigation("LeaveEmployeeRequests");

                    b.Navigation("ScreenShotTrackingLogs");

                    b.Navigation("Supervisors");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("WorkManagementPortal.Backend.Infrastructure.Models.WorkShift", b =>
                {
                    b.Navigation("Users");

                    b.Navigation("WorkShiftDetails");
                });

            modelBuilder.Entity("WorkManagementPortal.Backend.Infrastructure.Models.WorkTrackingLog", b =>
                {
                    b.Navigation("PauseTrackingLogs");

                    b.Navigation("ScreenShotTrackingLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
